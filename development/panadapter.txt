
<style>
.data_line {
  fill: none;
  stroke: #000;
  stroke-width: 1.5px;
}

.axis--y, .axis--x {
    stroke: white !important;
    color: white !important;
}

path.domain {
	fill: none !important;
}
#panadapter {
    background-color: #000060;
}
</style>
<svg id='panadapter' width='1084' height='572'>
</svg>

<script>
var scaleX = null;
var scaleY = null;
var samples = 1024;
var range = 512;
var center = 14.074;
var bandwidth = 0.02;
var minDbm = -130;
var maxDbm = -40;

function panadapter_setup() {
	const svg = d3.select("#panadapter");
	const margin = {top: 10, left: 10, bottom: 50, right: 50};
	const width = +svg.attr("width") - margin.left - margin.right;
	const height = +svg.attr("height") - margin.top - margin.bottom;
	const g = svg.append("g")
			.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	scaleX = d3.scaleLinear()
		.domain([0, samples - 1])
		.range([0, width]);

	scaleY = d3.scaleLinear()
		.domain([0, range])
		.range([height, 0]);

	g.append("defs").append("clipPath")
		.attr("id", "clip")
		.append("rect")
		.attr("width", width)
		.attr("height", height);

    // X Axis
	scaleXAxis = d3.scaleLinear()
		.domain([center - (bandwidth/2), center + (bandwidth/2)])
		.range([0, width]);

	g.append("g")
		.attr("class", "axis axis--x")
        .attr("transform", "translate(0," + height + ")")
		.call(d3.axisBottom(scaleXAxis));

    // Y Axis
	scaleYAxis = d3.scaleLinear()
			.domain([minDbm, maxDbm])
			.range([height, 0]);

	g.append("g")
		.attr("class", "axis axis--y")
        .attr("transform", "translate(" + width + ", 0)")
		.call(d3.axisRight(scaleYAxis));

	g.append("line")
	    .style("stroke", "yellow")
	    .attr("x1", samples/2)
	    .attr("y1", 0 )
	    .attr("x2", samples/2)
	    .attr("y2", 512 );
	    
    g.append("rect")
	    .attr("x", samples/2 - 110)
		.attr("y", 2)
		.attr("height", 40)
		.attr("width", 105)
		.attr("fill", "midnightblue")
		.style("stroke", "yellow");

    g.append("text")
	    .attr("x", samples/2 - 110)
		.attr("y", 30)
		.attr("fill", "yellow")
		.attr("font-size", "32px")
		.text("14.074");
	    
	g.append('g')
		.attr('clip-path', 'url(#clip)')
		.append('path')
		.attr('id', 'panadapter_data')
		.attr('class', 'line');
}

function tick(data) {
	if (scaleX && scaleY) {
		const lineGenerator = d3.area()
			.x(function(d, i) { return scaleX(i); })
			.y1(function(d, i) { return d; })
			.y0(512);

		const dp = lineGenerator(data);
		
		l = d3.select('#panadapter_data')
			.attr("d", dp)
			.style('fill', "#a3eafa77")
    		.style("stroke", "white")
			.transition()
			.duration(100)
			.ease(d3.easeLinear);
	}
}

function panadapter(scope) {
	const timer = setInterval(function() {
		if (window.d3) {
			clearInterval(timer);
			panadapter_setup();

			scope.$watch('msg', function (msg) {
				if (msg) {
					tick(msg.payload.data);
				}
			});
		}
	}, 1000);
}

panadapter(scope);

</script>